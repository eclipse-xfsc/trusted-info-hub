// Code generated by counterfeiter. DO NOT EDIT.
package infohubfakes

import (
	"context"
	"sync"

	"github.com/eclipse-xfsc/trusted-info-hub/internal/service/infohub"
)

type FakeSigner struct {
	CreatePresentationStub        func(context.Context, string, string, string, []map[string]interface{}) (map[string]interface{}, error)
	createPresentationMutex       sync.RWMutex
	createPresentationArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 string
		arg5 []map[string]interface{}
	}
	createPresentationReturns struct {
		result1 map[string]interface{}
		result2 error
	}
	createPresentationReturnsOnCall map[int]struct {
		result1 map[string]interface{}
		result2 error
	}
	VerifyPresentationStub        func(context.Context, []byte) error
	verifyPresentationMutex       sync.RWMutex
	verifyPresentationArgsForCall []struct {
		arg1 context.Context
		arg2 []byte
	}
	verifyPresentationReturns struct {
		result1 error
	}
	verifyPresentationReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeSigner) CreatePresentation(arg1 context.Context, arg2 string, arg3 string, arg4 string, arg5 []map[string]interface{}) (map[string]interface{}, error) {
	var arg5Copy []map[string]interface{}
	if arg5 != nil {
		arg5Copy = make([]map[string]interface{}, len(arg5))
		copy(arg5Copy, arg5)
	}
	fake.createPresentationMutex.Lock()
	ret, specificReturn := fake.createPresentationReturnsOnCall[len(fake.createPresentationArgsForCall)]
	fake.createPresentationArgsForCall = append(fake.createPresentationArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 string
		arg5 []map[string]interface{}
	}{arg1, arg2, arg3, arg4, arg5Copy})
	stub := fake.CreatePresentationStub
	fakeReturns := fake.createPresentationReturns
	fake.recordInvocation("CreatePresentation", []interface{}{arg1, arg2, arg3, arg4, arg5Copy})
	fake.createPresentationMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4, arg5)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSigner) CreatePresentationCallCount() int {
	fake.createPresentationMutex.RLock()
	defer fake.createPresentationMutex.RUnlock()
	return len(fake.createPresentationArgsForCall)
}

func (fake *FakeSigner) CreatePresentationCalls(stub func(context.Context, string, string, string, []map[string]interface{}) (map[string]interface{}, error)) {
	fake.createPresentationMutex.Lock()
	defer fake.createPresentationMutex.Unlock()
	fake.CreatePresentationStub = stub
}

func (fake *FakeSigner) CreatePresentationArgsForCall(i int) (context.Context, string, string, string, []map[string]interface{}) {
	fake.createPresentationMutex.RLock()
	defer fake.createPresentationMutex.RUnlock()
	argsForCall := fake.createPresentationArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5
}

func (fake *FakeSigner) CreatePresentationReturns(result1 map[string]interface{}, result2 error) {
	fake.createPresentationMutex.Lock()
	defer fake.createPresentationMutex.Unlock()
	fake.CreatePresentationStub = nil
	fake.createPresentationReturns = struct {
		result1 map[string]interface{}
		result2 error
	}{result1, result2}
}

func (fake *FakeSigner) CreatePresentationReturnsOnCall(i int, result1 map[string]interface{}, result2 error) {
	fake.createPresentationMutex.Lock()
	defer fake.createPresentationMutex.Unlock()
	fake.CreatePresentationStub = nil
	if fake.createPresentationReturnsOnCall == nil {
		fake.createPresentationReturnsOnCall = make(map[int]struct {
			result1 map[string]interface{}
			result2 error
		})
	}
	fake.createPresentationReturnsOnCall[i] = struct {
		result1 map[string]interface{}
		result2 error
	}{result1, result2}
}

func (fake *FakeSigner) VerifyPresentation(arg1 context.Context, arg2 []byte) error {
	var arg2Copy []byte
	if arg2 != nil {
		arg2Copy = make([]byte, len(arg2))
		copy(arg2Copy, arg2)
	}
	fake.verifyPresentationMutex.Lock()
	ret, specificReturn := fake.verifyPresentationReturnsOnCall[len(fake.verifyPresentationArgsForCall)]
	fake.verifyPresentationArgsForCall = append(fake.verifyPresentationArgsForCall, struct {
		arg1 context.Context
		arg2 []byte
	}{arg1, arg2Copy})
	stub := fake.VerifyPresentationStub
	fakeReturns := fake.verifyPresentationReturns
	fake.recordInvocation("VerifyPresentation", []interface{}{arg1, arg2Copy})
	fake.verifyPresentationMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeSigner) VerifyPresentationCallCount() int {
	fake.verifyPresentationMutex.RLock()
	defer fake.verifyPresentationMutex.RUnlock()
	return len(fake.verifyPresentationArgsForCall)
}

func (fake *FakeSigner) VerifyPresentationCalls(stub func(context.Context, []byte) error) {
	fake.verifyPresentationMutex.Lock()
	defer fake.verifyPresentationMutex.Unlock()
	fake.VerifyPresentationStub = stub
}

func (fake *FakeSigner) VerifyPresentationArgsForCall(i int) (context.Context, []byte) {
	fake.verifyPresentationMutex.RLock()
	defer fake.verifyPresentationMutex.RUnlock()
	argsForCall := fake.verifyPresentationArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeSigner) VerifyPresentationReturns(result1 error) {
	fake.verifyPresentationMutex.Lock()
	defer fake.verifyPresentationMutex.Unlock()
	fake.VerifyPresentationStub = nil
	fake.verifyPresentationReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSigner) VerifyPresentationReturnsOnCall(i int, result1 error) {
	fake.verifyPresentationMutex.Lock()
	defer fake.verifyPresentationMutex.Unlock()
	fake.VerifyPresentationStub = nil
	if fake.verifyPresentationReturnsOnCall == nil {
		fake.verifyPresentationReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.verifyPresentationReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeSigner) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createPresentationMutex.RLock()
	defer fake.createPresentationMutex.RUnlock()
	fake.verifyPresentationMutex.RLock()
	defer fake.verifyPresentationMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeSigner) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ infohub.Signer = new(FakeSigner)
