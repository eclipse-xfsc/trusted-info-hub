// Code generated by counterfeiter. DO NOT EDIT.
package infohubfakes

import (
	"context"
	"sync"

	"github.com/eclipse-xfsc/trusted-info-hub/internal/service/infohub"
	"github.com/eclipse-xfsc/trusted-info-hub/internal/storage"
)

type FakeStorage struct {
	ExportConfigurationStub        func(context.Context, string) (*storage.ExportConfiguration, error)
	exportConfigurationMutex       sync.RWMutex
	exportConfigurationArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	exportConfigurationReturns struct {
		result1 *storage.ExportConfiguration
		result2 error
	}
	exportConfigurationReturnsOnCall map[int]struct {
		result1 *storage.ExportConfiguration
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeStorage) ExportConfiguration(arg1 context.Context, arg2 string) (*storage.ExportConfiguration, error) {
	fake.exportConfigurationMutex.Lock()
	ret, specificReturn := fake.exportConfigurationReturnsOnCall[len(fake.exportConfigurationArgsForCall)]
	fake.exportConfigurationArgsForCall = append(fake.exportConfigurationArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.ExportConfigurationStub
	fakeReturns := fake.exportConfigurationReturns
	fake.recordInvocation("ExportConfiguration", []interface{}{arg1, arg2})
	fake.exportConfigurationMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeStorage) ExportConfigurationCallCount() int {
	fake.exportConfigurationMutex.RLock()
	defer fake.exportConfigurationMutex.RUnlock()
	return len(fake.exportConfigurationArgsForCall)
}

func (fake *FakeStorage) ExportConfigurationCalls(stub func(context.Context, string) (*storage.ExportConfiguration, error)) {
	fake.exportConfigurationMutex.Lock()
	defer fake.exportConfigurationMutex.Unlock()
	fake.ExportConfigurationStub = stub
}

func (fake *FakeStorage) ExportConfigurationArgsForCall(i int) (context.Context, string) {
	fake.exportConfigurationMutex.RLock()
	defer fake.exportConfigurationMutex.RUnlock()
	argsForCall := fake.exportConfigurationArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeStorage) ExportConfigurationReturns(result1 *storage.ExportConfiguration, result2 error) {
	fake.exportConfigurationMutex.Lock()
	defer fake.exportConfigurationMutex.Unlock()
	fake.ExportConfigurationStub = nil
	fake.exportConfigurationReturns = struct {
		result1 *storage.ExportConfiguration
		result2 error
	}{result1, result2}
}

func (fake *FakeStorage) ExportConfigurationReturnsOnCall(i int, result1 *storage.ExportConfiguration, result2 error) {
	fake.exportConfigurationMutex.Lock()
	defer fake.exportConfigurationMutex.Unlock()
	fake.ExportConfigurationStub = nil
	if fake.exportConfigurationReturnsOnCall == nil {
		fake.exportConfigurationReturnsOnCall = make(map[int]struct {
			result1 *storage.ExportConfiguration
			result2 error
		})
	}
	fake.exportConfigurationReturnsOnCall[i] = struct {
		result1 *storage.ExportConfiguration
		result2 error
	}{result1, result2}
}

func (fake *FakeStorage) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.exportConfigurationMutex.RLock()
	defer fake.exportConfigurationMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeStorage) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ infohub.Storage = new(FakeStorage)
