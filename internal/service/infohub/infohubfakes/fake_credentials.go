// Code generated by counterfeiter. DO NOT EDIT.
package infohubfakes

import (
	"sync"

	"github.com/hyperledger/aries-framework-go/pkg/doc/verifiable"
	"github.com/eclipse-xfsc/trusted-info-hub/internal/service/infohub"
)

type FakeCredentials struct {
	ParsePresentationStub        func([]byte) (*verifiable.Presentation, error)
	parsePresentationMutex       sync.RWMutex
	parsePresentationArgsForCall []struct {
		arg1 []byte
	}
	parsePresentationReturns struct {
		result1 *verifiable.Presentation
		result2 error
	}
	parsePresentationReturnsOnCall map[int]struct {
		result1 *verifiable.Presentation
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCredentials) ParsePresentation(arg1 []byte) (*verifiable.Presentation, error) {
	var arg1Copy []byte
	if arg1 != nil {
		arg1Copy = make([]byte, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.parsePresentationMutex.Lock()
	ret, specificReturn := fake.parsePresentationReturnsOnCall[len(fake.parsePresentationArgsForCall)]
	fake.parsePresentationArgsForCall = append(fake.parsePresentationArgsForCall, struct {
		arg1 []byte
	}{arg1Copy})
	stub := fake.ParsePresentationStub
	fakeReturns := fake.parsePresentationReturns
	fake.recordInvocation("ParsePresentation", []interface{}{arg1Copy})
	fake.parsePresentationMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCredentials) ParsePresentationCallCount() int {
	fake.parsePresentationMutex.RLock()
	defer fake.parsePresentationMutex.RUnlock()
	return len(fake.parsePresentationArgsForCall)
}

func (fake *FakeCredentials) ParsePresentationCalls(stub func([]byte) (*verifiable.Presentation, error)) {
	fake.parsePresentationMutex.Lock()
	defer fake.parsePresentationMutex.Unlock()
	fake.ParsePresentationStub = stub
}

func (fake *FakeCredentials) ParsePresentationArgsForCall(i int) []byte {
	fake.parsePresentationMutex.RLock()
	defer fake.parsePresentationMutex.RUnlock()
	argsForCall := fake.parsePresentationArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCredentials) ParsePresentationReturns(result1 *verifiable.Presentation, result2 error) {
	fake.parsePresentationMutex.Lock()
	defer fake.parsePresentationMutex.Unlock()
	fake.ParsePresentationStub = nil
	fake.parsePresentationReturns = struct {
		result1 *verifiable.Presentation
		result2 error
	}{result1, result2}
}

func (fake *FakeCredentials) ParsePresentationReturnsOnCall(i int, result1 *verifiable.Presentation, result2 error) {
	fake.parsePresentationMutex.Lock()
	defer fake.parsePresentationMutex.Unlock()
	fake.ParsePresentationStub = nil
	if fake.parsePresentationReturnsOnCall == nil {
		fake.parsePresentationReturnsOnCall = make(map[int]struct {
			result1 *verifiable.Presentation
			result2 error
		})
	}
	fake.parsePresentationReturnsOnCall[i] = struct {
		result1 *verifiable.Presentation
		result2 error
	}{result1, result2}
}

func (fake *FakeCredentials) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.parsePresentationMutex.RLock()
	defer fake.parsePresentationMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeCredentials) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ infohub.Credentials = new(FakeCredentials)
