// Code generated by counterfeiter. DO NOT EDIT.
package infohubfakes

import (
	"context"
	"sync"

	"github.com/eclipse-xfsc/trusted-info-hub/internal/service/infohub"
)

type FakePolicy struct {
	EvaluateStub        func(context.Context, string, interface{}, string, *int) ([]byte, error)
	evaluateMutex       sync.RWMutex
	evaluateArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 interface{}
		arg4 string
		arg5 *int
	}
	evaluateReturns struct {
		result1 []byte
		result2 error
	}
	evaluateReturnsOnCall map[int]struct {
		result1 []byte
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakePolicy) Evaluate(arg1 context.Context, arg2 string, arg3 interface{}, arg4 string, arg5 *int) ([]byte, error) {
	fake.evaluateMutex.Lock()
	ret, specificReturn := fake.evaluateReturnsOnCall[len(fake.evaluateArgsForCall)]
	fake.evaluateArgsForCall = append(fake.evaluateArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 interface{}
		arg4 string
		arg5 *int
	}{arg1, arg2, arg3, arg4, arg5})
	stub := fake.EvaluateStub
	fakeReturns := fake.evaluateReturns
	fake.recordInvocation("Evaluate", []interface{}{arg1, arg2, arg3, arg4, arg5})
	fake.evaluateMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4, arg5)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakePolicy) EvaluateCallCount() int {
	fake.evaluateMutex.RLock()
	defer fake.evaluateMutex.RUnlock()
	return len(fake.evaluateArgsForCall)
}

func (fake *FakePolicy) EvaluateCalls(stub func(context.Context, string, interface{}, string, *int) ([]byte, error)) {
	fake.evaluateMutex.Lock()
	defer fake.evaluateMutex.Unlock()
	fake.EvaluateStub = stub
}

func (fake *FakePolicy) EvaluateArgsForCall(i int) (context.Context, string, interface{}, string, *int) {
	fake.evaluateMutex.RLock()
	defer fake.evaluateMutex.RUnlock()
	argsForCall := fake.evaluateArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5
}

func (fake *FakePolicy) EvaluateReturns(result1 []byte, result2 error) {
	fake.evaluateMutex.Lock()
	defer fake.evaluateMutex.Unlock()
	fake.EvaluateStub = nil
	fake.evaluateReturns = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakePolicy) EvaluateReturnsOnCall(i int, result1 []byte, result2 error) {
	fake.evaluateMutex.Lock()
	defer fake.evaluateMutex.Unlock()
	fake.EvaluateStub = nil
	if fake.evaluateReturnsOnCall == nil {
		fake.evaluateReturnsOnCall = make(map[int]struct {
			result1 []byte
			result2 error
		})
	}
	fake.evaluateReturnsOnCall[i] = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakePolicy) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.evaluateMutex.RLock()
	defer fake.evaluateMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakePolicy) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ infohub.Policy = new(FakePolicy)
