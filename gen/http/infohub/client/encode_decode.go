// Code generated by goa v3.20.1, DO NOT EDIT.
//
// infohub HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/eclipse-xfsc/trusted-info-hub/design

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"

	infohub "github.com/eclipse-xfsc/trusted-info-hub/gen/infohub"
	goahttp "goa.design/goa/v3/http"
)

// BuildExportRequest instantiates a HTTP request object with method and path
// set to call the "infohub" service "Export" endpoint
func (c *Client) BuildExportRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		exportName string
	)
	{
		p, ok := v.(*infohub.ExportRequest)
		if !ok {
			return nil, goahttp.ErrInvalidType("infohub", "Export", "*infohub.ExportRequest", v)
		}
		exportName = p.ExportName
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ExportInfohubPath(exportName)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("infohub", "Export", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeExportResponse returns a decoder for responses returned by the infohub
// Export endpoint. restoreBody controls whether the response body should be
// restored after having been read.
func DecodeExportResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body any
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("infohub", "Export", err)
			}
			return body, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("infohub", "Export", resp.StatusCode, string(body))
		}
	}
}

// BuildImportRequest instantiates a HTTP request object with method and path
// set to call the "infohub" service "Import" endpoint
func (c *Client) BuildImportRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ImportInfohubPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("infohub", "Import", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeImportRequest returns an encoder for requests sent to the infohub
// Import server.
func EncodeImportRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*infohub.ImportRequest)
		if !ok {
			return goahttp.ErrInvalidType("infohub", "Import", "*infohub.ImportRequest", v)
		}
		body := p.Data
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("infohub", "Import", err)
		}
		return nil
	}
}

// DecodeImportResponse returns a decoder for responses returned by the infohub
// Import endpoint. restoreBody controls whether the response body should be
// restored after having been read.
func DecodeImportResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ImportResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("infohub", "Import", err)
			}
			err = ValidateImportResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("infohub", "Import", err)
			}
			res := NewImportResultOK(&body)
			return res, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("infohub", "Import", resp.StatusCode, string(body))
		}
	}
}
