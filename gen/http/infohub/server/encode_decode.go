// Code generated by goa v3.20.1, DO NOT EDIT.
//
// infohub HTTP server encoders and decoders
//
// Command:
// $ goa gen github.com/eclipse-xfsc/trusted-info-hub/design

package server

import (
	"context"
	"errors"
	"io"
	"net/http"

	infohub "github.com/eclipse-xfsc/trusted-info-hub/gen/infohub"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeExportResponse returns an encoder for responses returned by the
// infohub Export endpoint.
func EncodeExportResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(any)
		enc := encoder(ctx, w)
		body := res
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeExportRequest returns a decoder for requests sent to the infohub
// Export endpoint.
func DecodeExportRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			exportName string

			params = mux.Vars(r)
		)
		exportName = params["exportName"]
		payload := NewExportRequest(exportName)

		return payload, nil
	}
}

// EncodeImportResponse returns an encoder for responses returned by the
// infohub Import endpoint.
func EncodeImportResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*infohub.ImportResult)
		enc := encoder(ctx, w)
		body := NewImportResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeImportRequest returns a decoder for requests sent to the infohub
// Import endpoint.
func DecodeImportRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			body []byte
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			var gerr *goa.ServiceError
			if errors.As(err, &gerr) {
				return nil, gerr
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		payload := NewImportRequest(body)

		return payload, nil
	}
}
