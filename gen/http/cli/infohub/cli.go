// Code generated by goa v3.20.1, DO NOT EDIT.
//
// infohub HTTP client CLI support package
//
// Command:
// $ goa gen github.com/eclipse-xfsc/trusted-info-hub/design

package cli

import (
	"flag"
	"fmt"
	"net/http"
	"os"

	healthc "github.com/eclipse-xfsc/trusted-info-hub/gen/http/health/client"
	infohubc "github.com/eclipse-xfsc/trusted-info-hub/gen/http/infohub/client"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//	command (subcommand1|subcommand2|...)
func UsageCommands() string {
	return `infohub (export|import)
health (liveness|readiness)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` infohub export --export-name "testexport"` + "\n" +
		os.Args[0] + ` health liveness` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, any, error) {
	var (
		infohubFlags = flag.NewFlagSet("infohub", flag.ContinueOnError)

		infohubExportFlags          = flag.NewFlagSet("export", flag.ExitOnError)
		infohubExportExportNameFlag = infohubExportFlags.String("export-name", "REQUIRED", "Name of export to be performed.")

		infohubImportFlags    = flag.NewFlagSet("import", flag.ExitOnError)
		infohubImportBodyFlag = infohubImportFlags.String("body", "REQUIRED", "")

		healthFlags = flag.NewFlagSet("health", flag.ContinueOnError)

		healthLivenessFlags = flag.NewFlagSet("liveness", flag.ExitOnError)

		healthReadinessFlags = flag.NewFlagSet("readiness", flag.ExitOnError)
	)
	infohubFlags.Usage = infohubUsage
	infohubExportFlags.Usage = infohubExportUsage
	infohubImportFlags.Usage = infohubImportUsage

	healthFlags.Usage = healthUsage
	healthLivenessFlags.Usage = healthLivenessUsage
	healthReadinessFlags.Usage = healthReadinessUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "infohub":
			svcf = infohubFlags
		case "health":
			svcf = healthFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "infohub":
			switch epn {
			case "export":
				epf = infohubExportFlags

			case "import":
				epf = infohubImportFlags

			}

		case "health":
			switch epn {
			case "liveness":
				epf = healthLivenessFlags

			case "readiness":
				epf = healthReadinessFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     any
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "infohub":
			c := infohubc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "export":
				endpoint = c.Export()
				data, err = infohubc.BuildExportPayload(*infohubExportExportNameFlag)
			case "import":
				endpoint = c.Import()
				data, err = infohubc.BuildImportPayload(*infohubImportBodyFlag)
			}
		case "health":
			c := healthc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "liveness":
				endpoint = c.Liveness()
			case "readiness":
				endpoint = c.Readiness()
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// infohubUsage displays the usage of the infohub command and its subcommands.
func infohubUsage() {
	fmt.Fprintf(os.Stderr, `Information Hub Service enables exporting and importing information.
Usage:
    %[1]s [globalflags] infohub COMMAND [flags]

COMMAND:
    export: Export returns data signed as Verifiable Presentation.
    import: Import the given data wrapped as Verifiable Presentation into the Cache.

Additional help:
    %[1]s infohub COMMAND --help
`, os.Args[0])
}
func infohubExportUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] infohub export -export-name STRING

Export returns data signed as Verifiable Presentation.
    -export-name STRING: Name of export to be performed.

Example:
    %[1]s infohub export --export-name "testexport"
`, os.Args[0])
}

func infohubImportUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] infohub import -body STRING

Import the given data wrapped as Verifiable Presentation into the Cache.
    -body STRING: 

Example:
    %[1]s infohub import --body "data"
`, os.Args[0])
}

// healthUsage displays the usage of the health command and its subcommands.
func healthUsage() {
	fmt.Fprintf(os.Stderr, `Health service provides health check endpoints.
Usage:
    %[1]s [globalflags] health COMMAND [flags]

COMMAND:
    liveness: Liveness implements Liveness.
    readiness: Readiness implements Readiness.

Additional help:
    %[1]s health COMMAND --help
`, os.Args[0])
}
func healthLivenessUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] health liveness

Liveness implements Liveness.

Example:
    %[1]s health liveness
`, os.Args[0])
}

func healthReadinessUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] health readiness

Readiness implements Readiness.

Example:
    %[1]s health readiness
`, os.Args[0])
}
